{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/sri/Showcase_Projects/pomodoro/src/components/SetPomodoro/SetPomodoro.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useState } from 'react';\nimport { SettingsContext } from '../../context/SettingsContext';\nimport \"./setpomodoro.css\";\n\nconst SetPomodoro = () => {\n  _s();\n\n  const [newTimer, setNewTimer] = useState({\n    work: 0.2,\n    short: 0.1,\n    long: 0.5,\n    active: 'work'\n  });\n  const {\n    updateExecute\n  } = useContext(SettingsContext);\n\n  const handleChange = input => {\n    const {\n      name,\n      value\n    } = input.target;\n\n    switch (name) {\n      case 'work':\n        setNewTimer({ ...newTimer,\n          work: parseInt(value)\n        });\n        break;\n\n      case 'shortBreak':\n        setNewTimer({ ...newTimer,\n          short: parseInt(value)\n        });\n        break;\n\n      case 'longBreak':\n        setNewTimer({ ...newTimer,\n          long: parseInt(value)\n        });\n        break;\n    }\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const totalTime = e.target.work.value;\n    const numberOfBreaks = e.target.numberOfBreaks.value;\n    const longBreak = e.target.longBreak.value;\n    const numberOfCycles = numberOfBreaks;\n    let cycleTime = Math.round(totalTime * 60 / numberOfCycles);\n    const shortBreak = 5;\n    console.log(cycleTime);\n    console.log(shortBreak);\n    console.log(longBreak);\n    console.log(numberOfCycles);\n    newTimer.work = cycleTime;\n    newTimer.short = updateExecute(newTimer);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"form-container\",\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      noValidate: true,\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-wrapper\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"elements\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"input\",\n            children: \"Working Time (min)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"input\",\n            type: \"number\",\n            name: \"work\",\n            onChange: handleChange,\n            value: newTimer.work\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"elements\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"input\",\n            children: \"Short Break (min)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"input\",\n            type: \"number\",\n            name: \"shortBreak\",\n            onChange: handleChange,\n            value: newTimer.short\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"elements\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"input\",\n            children: \"Cycles (timer repeat)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"input\",\n            type: \"number\",\n            name: \"longBreak\",\n            onChange: handleChange,\n            value: newTimer.long\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"elements\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"input\",\n            children: \"Long Break (min)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"input\",\n            type: \"number\",\n            name: \"longBreak\",\n            onChange: handleChange,\n            value: newTimer.long\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Set\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 9\n  }, this);\n};\n\n_s(SetPomodoro, \"4m4b7x/2l9D7XO6kgvksjRAnA/4=\");\n\n_c = SetPomodoro;\nexport default SetPomodoro;\n\nvar _c;\n\n$RefreshReg$(_c, \"SetPomodoro\");","map":{"version":3,"sources":["/home/sri/Showcase_Projects/pomodoro/src/components/SetPomodoro/SetPomodoro.jsx"],"names":["React","useContext","useState","SettingsContext","SetPomodoro","newTimer","setNewTimer","work","short","long","active","updateExecute","handleChange","input","name","value","target","parseInt","handleSubmit","e","preventDefault","totalTime","numberOfBreaks","longBreak","numberOfCycles","cycleTime","Math","round","shortBreak","console","log"],"mappings":"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","sourcesContent":["import React, { useContext, useState } from 'react'\nimport { SettingsContext } from '../../context/SettingsContext'\nimport \"./setpomodoro.css\"\n\nconst SetPomodoro = () => {\n\n    const [newTimer, setNewTimer] = useState({\n        work: 0.2,\n        short: 0.1,\n        long: 0.5,\n        active: 'work'\n    })\n\n    const {updateExecute} = useContext(SettingsContext)\n\n    const handleChange = input => {\n        const {name, value} = input.target\n        switch (name) {\n            case 'work':\n                setNewTimer({\n                    ...newTimer,\n                    work: parseInt(value)\n                })\n                break;\n            case 'shortBreak':\n                setNewTimer({\n                    ...newTimer,\n                    short: parseInt(value)\n                })\n                break;\n            case 'longBreak':\n                setNewTimer({\n                    ...newTimer,\n                    long: parseInt(value)\n                })\n                break;\n        }\n    }\n    const handleSubmit = e => {\n        e.preventDefault()\n        const totalTime = e.target.work.value;\n        const numberOfBreaks = e.target.numberOfBreaks.value;\n        const longBreak = e.target.longBreak.value;\n        const numberOfCycles = numberOfBreaks;\n        let cycleTime = Math.round((totalTime*60) / numberOfCycles);\n        const shortBreak = 5;\n        console.log(cycleTime)\n        console.log(shortBreak)\n        console.log(longBreak)\n        console.log(numberOfCycles)\n        newTimer.work = cycleTime;\n        newTimer.short = \n\n        updateExecute(newTimer)\n    }\n\n\n    return (\n        <div className=\"form-container\">\n            <form noValidate onSubmit={handleSubmit}>\n                <div className=\"input-wrapper\">\n                    <div className=\"elements\">\n                    <label htmlFor=\"input\">Working Time (min)</label>\n                    <input className=\"input\" type=\"number\" name=\"work\" onChange={handleChange} value={newTimer.work} />\n                    </div>\n                    <div className=\"elements\">\n                    <label htmlFor=\"input\">Short Break (min)</label>\n                    <input className=\"input\" type=\"number\" name=\"shortBreak\" onChange={handleChange} value={newTimer.short} />\n                    </div>\n                    <div className=\"elements\">\n                    <label htmlFor=\"input\">Cycles (timer repeat)</label>\n                    <input className=\"input\" type=\"number\" name=\"longBreak\" onChange={handleChange} value={newTimer.long} />\n                    </div>\n                    <div className=\"elements\">\n                    <label htmlFor=\"input\">Long Break (min)</label>\n                    <input className=\"input\" type=\"number\" name=\"longBreak\" onChange={handleChange} value={newTimer.long} />\n                    </div>\n                </div>\n                <button type='submit'>Set</button>\n            </form>\n        </div>\n    )\n}\n\nexport default SetPomodoro\n"]},"metadata":{},"sourceType":"module"}